#!/usr/bin/env node

var program = require('commander');
var Masher = require('../lib/masher');
var path = require('path');
var fs = require('fs');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .option('-m, --mapping <file>', 'Save mapping file')
  .usage('[file]')

//program.on('--help', function() {
  //console.log('  Examples:');  
  //console.log('');  
  //console.log('    # convert markdown and code blocks to html');
  //console.log('    $ markx blog.md > blog.html');
//});

program.parse(process.argv);

var files = program.args;

if (files.length == 1) {
  var file = files[0];
  var config = path.join(process.cwd(), file);
  var masher = new Masher(config, false);
  masher.build(function() {
    console.log('Generated:');
    for (var key in masher.config.groups) {
      var group = masher.config.groups[key];
      if (group.scriptOut)
        console.log(key + ': ' + group.scriptOut + ' (' + group.scriptSize + 'kb)');
      if (group.styleOut)
        console.log(key + ': ' + group.styleOut + ' (' + group.styleSize + 'kb)');
    }
    if (program.mapping) {
      var map = masher.getMapping();
      fs.writeFile(program.mapping, JSON.stringify(map), function(err) {
        if (err) throw err;
      });
    }
  });
} else {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit(1);
}
